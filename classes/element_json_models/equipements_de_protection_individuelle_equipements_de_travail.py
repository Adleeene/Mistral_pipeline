# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class equipements_de_protection_individuelle_equipements_de_travail_0(BaseModel):
    type_de_control : Optional[Literal['Vérification périodique']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_peremption : Optional[str] = Field(description="La date de péremption de l'équipement de travail, si présent.")
    date_de_fabrication : Optional[str] = Field(description="La date de fabrication (peut être appelé plaque) de l'équipement de travail, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service de l'équipement de travail, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant de l'équipement de travail, si présent.")
    modele : Optional[str] = Field(description="Le modèle (ou type) de l'équipement de travail, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut de l'équipement de travail, si présent.")
    assigne_a : Optional[str] = Field(description="La personne à qui l'équipement de travail est assigné, si présent.")


class equipements_de_protection_individuelle_equipements_de_travail_1(BaseModel):
    type_element : Optional[Literal['Protection de la tête', 'Protection auditive', 'Protection du visage', 'Protection des mains', 'Protection du corps', 'Protection des pieds', 'Sac', 'Autre', '']] = Field(description="Le type d'élément de l'équipement de travail, si présent.")
