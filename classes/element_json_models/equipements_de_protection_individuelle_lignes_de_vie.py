# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class equipements_de_protection_individuelle_lignes_de_vie_0(BaseModel):
    type_de_control : Optional[Literal['Vérification périodique des ancrages']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service de la ligne de vie, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant de la ligne de vie, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut de la ligne de vie, si présent.")
    caracteristique : Optional[Literal['Permanente', 'Temporaire', '']] = Field(description="Les caractéristiques de la ligne de vie, si présent.")
    materiau : Optional[str] = Field(description="Le matériau de la ligne de vie, si présent.")
    longueur_en_m_var : Optional[float] = Field(description="La longueur de la ligne de vie en mètres, si présent.")
    nombre_d_ancrage : Optional[int] = Field(description="Le nombre d'ancrages de la ligne de vie, si présent.")
    installation : Optional[Literal['Horizontale', 'Verticale', '']] = Field(description="Le type d'installation de la ligne de vie, si présent.")
    type_element : Optional[Literal['Câble', 'Rail', '']] = Field(description="Le type d'élément de la ligne de vie, si présent.")
