# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class rampes_d_acces_quai_niveleur_0(BaseModel):
    type_de_control : Optional[Literal['Vérification périodique']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_fabrication : Optional[str] = Field(description="La date de fabrication (peut être appelé plaque) de la rampe d'accès au quai niveleur, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service de la rampe d'accès au quai niveleur, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant de la rampe d'accès au quai niveleur, si présent.")
    capacite_maximale_kg_var : Optional[int] = Field(description="La capacité maximale de la rampe d'accès au quai niveleur, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut de la rampe d'accès au quai niveleur, si présent.")
    modele : Optional[str] = Field(description="Le modèle (ou type) de la rampe d'accès au quai niveleur, si présent.")
    marquage_ce : Optional[bool] = Field(description="Le marquage CE est-il présent.")


class rampes_d_acces_quai_niveleur_1(BaseModel):
    type_element : Optional[str] = Field(description="Le type d'élément de la rampe d'accès au quai niveleur, si présent.")
