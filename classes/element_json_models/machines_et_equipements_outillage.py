# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class machines_et_equipements_outillage_0(BaseModel):
    type_de_control : Optional[Literal['Contrôle périodique']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_fabrication : Optional[str] = Field(description="La date de fabrication (peut être appelé plaque) de l'outil, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service de l'outil, si présent.")
    mobilite : Optional[Literal['Fixe', 'Mobile']] = Field(description="La mobilité de l'outil, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut de l'outillage, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant de l'outil, si présent.")


class machines_et_equipements_outillage_1(BaseModel):
    autre_type : Optional[str] = Field(description=".")
    environnement_d_utilisation : Optional[str] = Field(description="L'environnement d'utilisation de l'outil, si présent.")
    modele : Optional[str] = Field(description="Le modèle (ou type) de l'outil, si présent.")


class machines_et_equipements_outillage_2(BaseModel):
    type_d_outil : Optional[Literal['Mécanique', 'Électrique', 'Pneumatique', 'Hydraulique', 'Autre', '']] = Field(description="Le type d'outil, si présent.")
