# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class metrologie_appareil_de_mesure_0(BaseModel):
    type_de_control : Optional[Literal['Vérification périodique', 'Étalonnage']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service de l'appareil de mesure, si présent.")
    duree_de_vie_annee_var : Optional[int] = Field(description="La durée de vie de l'appareil de mesure, si présent.")
    n_lot_de_l_appareil : Optional[str] = Field(description="Le numéro de lot de l'appareil de mesure, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut de l'appareil de mesure, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant de l'appareil de mesure, si présent.")
    autre_type : Optional[str] = Field(description="Un autre type de l'appareil de mesure, si présent.")
    modele : Optional[str] = Field(description="Le modèle (ou type) de l'appareil de mesure, si présent.")
    grandeur_mesuree : Optional[str] = Field(description="La grandeur mesurée par l'appareil de mesure, si présent.")
    type_appareil : Optional[Literal['Électronique', 'Mécanique', 'Pression', 'Pesage', 'Autre', '']] = Field(description="Le type de l'appareil de mesure, si présent.")
