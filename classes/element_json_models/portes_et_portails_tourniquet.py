# Specific element field file
#
# Don't modify this file directly !
# It's generated by features_class_maker.py from values in choices_1.json
#
# To modify the specific element fields:
#  - Modify the choices_1.json file
#  - On mac: cd pipeline, python feature_class_make.py

from typing import Optional, Literal
from pydantic import Field, BaseModel



class portes_et_portails_tourniquet_0(BaseModel):
    type_de_control : Optional[Literal['Vérification périodique']] = Field(description="Le type de contrôle effectué sur l'élément, si présent.")
    date_de_mise_en_service : Optional[str] = Field(description="La date de mise en service du tourniquet, si présent.")
    en_location : Optional[bool] = Field(description=".")
    status : Optional[Literal['Actif', 'Au chômage', 'Au rebut', 'En stock', 'Au brouillon', '']] = Field(description="Le statut du tourniquet, si présent.")
    passage : Optional[Literal['Simple', 'Double', 'Autre', '']] = Field(description="Le type de passage du tourniquet, si présent.")
    usage : Optional[Literal['Piéton', 'Personne à mobilité réduite', 'De chantier', 'Autre', '']] = Field(description="L'usage du tourniquet, si présent.")
    materiau : Optional[str] = Field(description="Le matériau du tourniquet, si présent.")
    mode_de_fonctionnement : Optional[Literal['Manuel', 'Automatique', '']] = Field(description="Le mode de fonctionnement du tourniquet, si présent.")
    fabricant : Optional[str] = Field(description="La marque du fabricant du tourniquet, si présent.")


class portes_et_portails_tourniquet_1(BaseModel):
    autre_type_de_passage : Optional[str] = Field(description=".")
    autre_type_d_usage : Optional[str] = Field(description=".")
